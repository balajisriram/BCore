#! /usr/bin/python
"""
BOOTSTRAP is the usual way to initiate clients. The purpose of this
scripts is not completely clear. It needs more thought
"""

__author__ = "Balaji Sriram"
__version__ = "0.0.1"
__copyright__ = "Copyright 2018"
__license__ = "GPL"
__version__ = "1.0.1"
__maintainer__ = "Balaji Sriram"
__email__ = "balajisriram@gmail.com"
__status__ = "Production"

import sys

from bcore.Classes.Stations.StandardVisionBehaviorStation import StandardVisionBehaviorStation
from bcore.Classes.Stations.Station import Station


def bootstrap(mode='init', procType='client', **kwargs):
    print(('Currently bootstrap automatically calls git pull'))
    if mode == 'init':
        if procType == 'client':
            st = Station(**kwargs)
            st.run()
        elif procType == 'standardVisionClient' or procType == 'std-cli':
            st = StandardVisionBehaviorStation(**kwargs)
            st.run()
        elif procType == 'server':
            server = BServer(**kwargs)
        elif procType == 'localServer':
            server = BServerLocal(**kwargs)
    elif mode == 'run':
        if procType == 'client':
            pass
        elif procType == 'standardVisionClient' or procType == 'std-cli':
            st = StandardVisionBehaviorStation(**kwargs)
            st.run()
        elif procType == 'server':
            server = BServer()
            server.run(serverGUI=kwargs['serverGUI'])
        elif procType == 'localServer':
            server = BServerLocal()
            server.run(serverGUI=kwargs['serverGUI'])
    else:
        raise NotImplementedError('Unknown bootstrap mode:: \
            You sent %s. Allowed {''init'',''run''}')


if __name__ == '__main__':
    # set defaults for all the things that need to be sent to the bootstrap
    # function
    mode = 'init'
    procType = 'client'
    bootstrapKWArgs = {
        'stationID': 0,
        'stationName': 'Station0',
        'display': None,
        'soundOn': False,
        'parallelPort': 'standardVisionBehaviorDefault',
        'serverID': 0,
        'serverName': 'Server0',
        'serverGUI': False
        }
    # parse input arguments and send to bootstrap
    # loop through the arguments and deal with them one at a time
    args = iter(sys.argv)
    for arg in args:
        if arg == 'bootstrap':
            # do nothing. this is the initial call to python
            pass
        elif arg == 'mode' or arg == '-mode' or arg == '--mode':
            arg = next(args)
            mode = arg
            print 'mode::', mode
        elif arg == 'procType' or arg == '-procType' or arg == '--procType':
            arg = next(args)
            procType = arg
            print 'procType::', procType
        elif (arg == 'stationID') or (  # all the integers
            arg == 'serverID'):
            bootstrapKWArgs[arg] = int(next(args))
            print arg, '::', bootstrapKWArgs[arg]
        elif (arg == 'stationName') or (  # all the strings
            arg == 'display') or (
            arg == 'parallelPort') or (
            arg == 'serverName'):
            bootstrapKWArgs[arg] = next(args)
            print arg, '::', bootstrapKWArgs[arg]
        elif (arg == 'soundOn') or (  # all the bools
            arg == 'severGUI'):
            options = {False: ('False','false','f','no','n'),
                True: ('True', 'true', 't', 'yes', 'y')}
            temp = next(args)
            if temp in options[False]:
                bootstrapKWArgs[arg] = False
                chosen = False
            elif temp in options[True]:
                bootstrapKWArgs[arg] = True
            else:
                raise ValueError('Unknown value for a boolean option')
            print arg, '::', bootstrapKWArgs[arg]

    bootstrap(mode, procType, **bootstrapKWArgs)
